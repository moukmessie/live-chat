#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('live-chat:server');
const http = require('http');
const {Server} = require('socket.io');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
const io = new Server(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * chat server
 */

/*io.on('connection',(socket )=>{
    console.log('a user connected');
    socket.on('disconnect',()=>{
        console.log('user disconnected');
    });
});*/
//const count= io.engine.clientsCount;
//const count2 = io.of("/").sockets.size;

let userConnected=[];

io.on('connection',(socket )=>{
  //user connected
  socket.on('name',(name)=>{
    socket.name=name;//get username and stocke it in socket name
    // io.emit('newUser',name);
    socket.broadcast.emit('newUser',name);//send username to client
  });
  //user disconnected
  socket.on('disconnect',()=>{
    socket.broadcast.emit('quitUser',socket.name);//send username to client
  });
  //writing *give parameter name if team chat
  socket.on('writing',()=>{
    socket.broadcast.emit('writing');
    // socket.broadcast.emit('writing',socket.name); //for team team
  });
  //not writing
  socket.on('notWriting',()=>{
    socket.broadcast.emit('notWriting');
  });
  //send message to all users
  socket.on('chat message',(msg)=>{
    io.emit('chat message',msg);
    //socket.broadcast.emit('group chat',{msg:msg, name: socket.name}); //for team chat
  });
});







/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
